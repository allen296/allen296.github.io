/* 
/* Estilos generales */
/* 
body {
    margin: 0;
    padding: 0;
    background-color: #114c5f;
    display: flex;
    flex-direction: column; /* Alinear elementos en columna */
/* 
    justify-content: center;
    align-items: center;
    height: 100vh;
    font-family: 'Rubik', sans-serif; /* Aplicar la fuente Rubik al cuerpo del documento */
}

/* Estilos del contenedor del círculo */
/* 
#circle-container {
    width: 80vw; /* El contenedor ocupa el 80% del ancho de la ventana */
/* 
    max-width: 400px; /* Establece un ancho máximo para el contenedor */
/* 
    height: 80vw; /* Mantiene una relación de aspecto 1:1 */
/* 
    max-height: 400px; /* Establece una altura máxima para el contenedor */
/* 
    position: relative;
}

/* Estilos del círculo */
/* 
#circle {
    width: 100%;
    height: 100%;
    background-color: #fff;
    border-radius: 50%; /* Hace que el contenedor sea circular */
/* 
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
 /*   overflow: hidden; /* Para asegurar que la imagen no se desborde del círculo */*/
}

/* Estilos de la imagen */
/* 
#circle img {
    width: 100%; /* La imagen ocupa el 100% del contenedor del círculo */
/* 
    height: auto; /* Ajusta automáticamente la altura para mantener la proporción */
/* 
    max-width: 100%; /* Ajusta el tamaño máximo de la imagen */
/* 
    max-height: 100%; /* Ajusta el tamaño máximo de la imagen */
/* 
}
*/




function calculateModifier(score) {
    return Math.floor((score - 10) / 2);
}

function getProficiencyBonus(level) {
    return Math.ceil(level / 4) + 1;
}

function calculateAll() {
    updateProficiencyBonus();
    updateModifiers();
}

function updateProficiencyBonus() {
    const level = parseInt(document.getElementById('level').value) || 1;
    const proficiencyBonus = getProficiencyBonus(level);
    document.getElementById('proficiency-bonus').innerText = `+${proficiencyBonus}`;
}

function updateModifiers() {
    const stats = ['strength', 'dexterity', 'constitution', 'intelligence', 'wisdom', 'charisma'];
    const level = parseInt(document.getElementById('level').value) || 1;
    const proficiencyBonus = getProficiencyBonus(level);

    stats.forEach(stat => {
        const statValue = parseInt(document.getElementById(stat).value) || 0;
        const modValue = calculateModifier(statValue);
        document.getElementById(`${stat}-mod`).innerText = modValue >= 0 ? `+${modValue}` : `${modValue}`;

        // Update saving throws if checkbox is checked
        if (document.getElementById(`${stat}-save`).checked) {
            const saveMod = modValue + proficiencyBonus;
            document.getElementById(`${stat}-save-mod`).innerText = saveMod >= 0 ? `+${saveMod}` : `${saveMod}`;
        } else {
            document.getElementById(`${stat}-save-mod`).innerText = modValue >= 0 ? `+${modValue}` : `${modValue}`;
        }
    });

    // Update skill modifiers
    const skills = [
        { id: 'acrobatics', stat: 'dexterity' },
        { id: 'animal-handling', stat: 'wisdom' }
        // Add more skills as needed
    ];

    skills.forEach(skill => {
        const statValue = parseInt(document.getElementById(skill.stat).value) || 0;
        const modValue = calculateModifier(statValue);
        const proficiencyCheckbox = document.getElementById(skill.id);
        const expertiseCheckbox = document.getElementById(`${skill.id}-expertise`);

        let skillMod = modValue;
        if (proficiencyCheckbox.checked && expertiseCheckbox.checked) {
            skillMod += proficiencyBonus * 2;
        } else if (proficiencyCheckbox.checked) {
            skillMod += proficiencyBonus;
        }

        document.getElementById(`${skill.id}-mod`).innerText = skillMod >= 0 ? `+${skillMod}` : `${skillMod}`;
    });
}

// Initialize modifiers on page load
window.onload = calculateAll;



